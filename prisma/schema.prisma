generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Snippet {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  language    String
  tags        String[]
  featured    Boolean  @default(false)
  shareToken  String?  @unique
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites   Favorite[]
  versions    SnippetVersion[]
  views       SnippetView[]
  collections CollectionSnippet[]

  @@index([language])
  @@index([tags])
  @@index([title])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  snippets      Snippet[]
  collections   Collection[]
  favorites     Favorite[]
  versions      SnippetVersion[]
}

model SnippetVersion {
  id        String   @id @default(cuid())
  snippetId String
  userId    String
  content   String
  createdAt DateTime @default(now())
  snippet   Snippet  @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([snippetId])
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  snippetId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  snippet   Snippet  @relation(fields: [snippetId], references: [id], onDelete: Cascade)

  @@unique([userId, snippetId])
  @@index([userId])
  @@index([snippetId])
}


model Collection {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  snippets    CollectionSnippet[]

  @@index([userId])
}

model CollectionSnippet {
  id           String     @id @default(cuid())
  collectionId String
  snippetId    String
  addedAt      DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  snippet      Snippet    @relation(fields: [snippetId], references: [id], onDelete: Cascade)

  @@unique([collectionId, snippetId])
  @@index([collectionId])
  @@index([snippetId])
}

model SnippetView {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  snippetId String
  snippet   Snippet  @relation(fields: [snippetId], references: [id], onDelete: Cascade)

  @@index([snippetId])
  @@index([createdAt])
}